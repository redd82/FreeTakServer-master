#######################################################
#
# EmergencyFacade.py
# Python implementation of the Class Emergency
# part of Component:
# Component Version: 1.0
# Generated by ComponentNameFacade
# Generated on: 2022-11-18   13:57:53.712997600
# Author: (Future feature of EA-Bridge)
#######################################################

from FreeTAKServer.components.extended.emergency.controllers.emergency_general_controller import EmergencyGeneralController
from FreeTAKServer.components.extended.emergency.controllers.emergency_off_controller import EmergencyOffController
from FreeTAKServer.components.extended.emergency.controllers.emergency_on_controller import EmergencyOnController
from FreeTAKServer.components.extended.emergency.controllers.emergency_persistence import EmergencyPersistence
from FreeTAKServer.components.extended.emergency.controllers.emergency_sender_controller import EmergencySenderController
from digitalpy.core.component_management.impl.default_facade import DefaultFacade
from FreeTAKServer.core.configuration.MainConfig import MainConfig
from FreeTAKServer.components.extended.emergency.configuration.emergency_constants import (
    ACTION_MAPPING_PATH,
    TYPE_MAPPINGS,
    LOGGING_CONFIGURATION_PATH,
    INTERNAL_ACTION_MAPPING_PATH,
    MANIFEST_PATH,
    CONFIGURATION_PATH_TEMPLATE,
)
from . import base

config = MainConfig.instance()


class Emergency(DefaultFacade):
    """Facade class for the Component Emergency.
    Responsible for handling all public routing.
    Forwards all requests to the internal router.
    """

    def __init__(
        self,
        sync_action_mapper,
        request,
        response,
        configuration,
        emergency_action_mapper=None,
        tracing_provider_instance=None,
    ):
        super().__init__(
            # the path to the external action mapping
            action_mapping_path=ACTION_MAPPING_PATH,
            # the path to the internal action mapping
            internal_action_mapping_path=INTERNAL_ACTION_MAPPING_PATH,
            # the type mapping in dictionary form
            type_mapping=TYPE_MAPPINGS,
            # the path to the logger configuration
            logger_configuration=LOGGING_CONFIGURATION_PATH,
            # the package containing the base classes
            base=base,
            # the component specific action mapper (passed by constructor)
            action_mapper=emergency_action_mapper,
            # the request object (passed by constructor)
            request=request,
            # the response object (passed by constructor)
            response=response,
            # the configuration object (passed by constructor)
            configuration=configuration,
            # log file path
            log_file_path=config.LogFilePath,
            # the tracing provider used
            tracing_provider_instance=tracing_provider_instance,
            # the template for the absolute path to the model object definitions
            configuration_path_template=CONFIGURATION_PATH_TEMPLATE,
            # the path to the manifest file
            manifest_path=MANIFEST_PATH,
        )
        self.persistency_controller = EmergencyPersistence(
            sync_action_mapper, request, response, configuration
        )
        self.general_controller = EmergencyGeneralController(
            sync_action_mapper, request, response, configuration
        )
        self.on_controller = EmergencyOnController(
            sync_action_mapper, request, response, configuration, emergency_action_mapper
        )
        self.off_controller = EmergencyOffController(
            sync_action_mapper, request, response, configuration, emergency_action_mapper
        )
        self.sender_controller = EmergencySenderController(
            sync_action_mapper, request, response, configuration, emergency_action_mapper
        )

    def initialize(self, request, response):
        super().initialize(request, response)
        self.persistency_controller.initialize(request, response)
        self.on_controller.initialize(request, response)
        self.off_controller.initialize(request, response)
        self.general_controller.initialize(request, response)
        self.sender_controller.initialize(request, response)
        
    def execute(self, method):
        try:
            if hasattr(self, method):
                getattr(self, method)(**self.request.get_values())
            else:
                self.request.set_value("logger", self.logger)
                self.request.set_value("config_loader", self.config_loader)
                self.request.set_value("tracer", self.tracer)
                response = self.execute_sub_action(self.request.get_action())
                self.response.set_values(response.get_values())
        except Exception as e:
            self.logger.fatal(str(e))

    @DefaultFacade.public
    def create_emergency_alert(self, *args, **kwargs):
        """create an emergency alert"""
        self.on_controller.evaluate_request(*args, **kwargs)

    @DefaultFacade.public
    def get_all_emergencies(self, *args, **kwargs):
        """get all emergencies"""
        self.persistency_controller.get_all_emergencies(*args, **kwargs)

    @DefaultFacade.public
    def cancel_emergency_alert(self, *args, **kwargs):
        self.off_controller.evaluate_request(*args, **kwargs)

    @DefaultFacade.public
    def broadcast_emergency(self, *args, **kwargs):
        self.sender_controller.broadcast_emergency(*args, **kwargs)

    @DefaultFacade.public
    def send_emergencies_to_client(self, *args, **kwargs):
        self.sender_controller.send_emergencies_to_client(*args, **kwargs)
