#######################################################
# 
# core_name_general_controller.py
# Python implementation of the Class CoreNameGeneralController
# Generated by Enterprise Architect
# Created on:      16-Dec-2022 10:56:05 AM
# Original author: Giu Platania
# 
#######################################################
import hashlib
from typing import List, TYPE_CHECKING
import uuid
if TYPE_CHECKING:
    from FreeTAKServer.core.enterprise_sync.persistence.sqlalchemy.enterprise_sync_keyword import EnterpriseSyncKeyword
    from FreeTAKServer.core.enterprise_sync.persistence.sqlalchemy.enterprise_sync_data_object import EnterpriseSyncDataObject

from digitalpy.core.main.controller import Controller
from digitalpy.core.zmanager.request import Request
from digitalpy.core.zmanager.response import Response
from digitalpy.core.zmanager.action_mapper import ActionMapper
from digitalpy.core.digipy_configuration.configuration import Configuration

from FreeTAKServer.core.enterprise_sync.controllers.enterprise_sync_database_controller import EnterpriseSyncDatabaseController

from .enterprise_sync_filesystem_controller import EnterpriseSyncFilesystemController
from .enterprise_sync_format_synchronization_controller import EnterpriseSyncFormatSynchronizationController

class EnterpriseSyncGeneralController(Controller):
    """general enterprise sync operations"""

    def __init__(
        self,
        request: Request,
        response: Response,
        sync_action_mapper: ActionMapper,
        configuration: Configuration,
    ) -> None:
        super().__init__(request, response, sync_action_mapper, configuration)
        self.filesystem_controller = EnterpriseSyncFilesystemController(request, response, sync_action_mapper, configuration)
        self.persistence_controller = EnterpriseSyncDatabaseController(request, response, sync_action_mapper, configuration)
        self.format_sync_controller = EnterpriseSyncFormatSynchronizationController(request, response, sync_action_mapper, configuration)

    def initialize(self, request: Request, response: Response):
        super().initialize(request, response)
        self.filesystem_controller.initialize(request, response)
        self.persistence_controller.initialize(request, response)
        self.format_sync_controller.initialize(request, response)

    def broadcast(self):
        """Broadcasts a specific data package to all users in the system."""
        pass
    
    def enrollment(self):
        """Enrolls the user to FTS, provisioning ATAK devices through device profiles."""
        pass
    
    def file_list_http(self):
        """Gets a list of files on the server."""
        pass
    
    def excheck_join_existing_checklist(self):
        """Joins the user to a started set of tasks."""
        pass
    
    def delete_file(self):
        """Deletes a file from the server."""
        pass
    
    def download_file(self):
        """Downloads a file from the server."""
        pass
    
    def download_file_http(self):
        """Downloads one file from the server via HTTP."""
        pass
    
    def download_file_https(self):
        """Downloads one file from the server via HTTPS."""
        pass
    
    def file_list(self):
        """Provides a list of files on the server."""
        pass
    
    def file_list_https(self):
        """Gets a list of files on the server via HTTPS."""
        pass
    
    def generate_show_qr_code(self):
        """Generates and shows a QR code."""
        pass
    
    def is_private(self):
        """Checks if a data package is private.
        
        Returns:
            bool: True if the data package is private, False otherwise.
        """
        pass
    
    def upload_file(self):
        """Uploads a data package from the UI."""
        pass
    
    def upload_file_http(self):
        """Uploads one file to the server via HTTP."""
        pass
    
    def upload_file_https(self):
        """Uploads one file to the server via HTTPS."""
        pass

    def save_enterprise_sync_data(self, synctype: str, objectuid: str, objectdata: str, objkeywords: list, tool, mime_type, logger, objecthash: str=None, file_name=None, length=None, convert_newlines: bool = False, creator_uid = "", privacy=0, *args, **kwargs):
        """save enterprise sync data to the db and the file system"""
        if file_name==None:
            file_name = objectuid
        if convert_newlines:
            objectdata = self.format_sync_controller.convert_newlines(objectdata)
        if objecthash == None:
            objecthash = str(hashlib.sha256(objectdata).hexdigest())
        if objectuid == None:
            objectuid = str(uuid.uuid4())
        if length == None:
            obj_length = len(objectdata)
        else:
            obj_length = length
        self.filesystem_controller.save_file(synctype, objectuid, objectdata)
        data_obj = self.persistence_controller.create_enterprise_sync_data_object(synctype, objectuid, objecthash, obj_length, objkeywords, mime_type, tool, creator_uid=creator_uid, file_name=file_name, logger=logger, private=privacy)

        self.response.set_value("objectmetadata", data_obj)

        return data_obj

    def update_enterprise_sync_data(self, objectuid: str, objecthash: str, objectdata: str, logger, *args, **kwargs):
        """update enterprise sync data in the db and the file system

        Args:
            synctype (str): the type of sync object
            objecthash (str): the hash of the object
            objectuid (str): the uid of the object
            objectdata (str): the data of the object
            logger (_type_): the logger object passed automatically by the controller
        """
        data_obj = self.persistence_controller.get_enterprise_sync_data_object(object_uid=objectuid, logger=logger)
        objectdata = self.format_sync_controller.convert_newlines(objectdata)
        self.filesystem_controller.save_file(data_obj.file_type, objectuid, objectdata)
        self.persistence_controller.update_enterprise_sync_object(filetype=data_obj.file_type, objectuid=objectuid, objecthash=objecthash, logger=logger)

    def update_enterprise_sync_metadata(self, logger, objectuid: str = None, objecthash: str = None, keywords: list = None, length: str=None, mime_type: str=None, file_name: str=None, objstarttime: str = None, privacy=None, *args, **kwargs):
        """update an enterprise_sync metadata object

        Args:
            logger (_type_): _description_
            objectuid (str, optional): _description_. Defaults to None.
            objecthash (str, optional): _description_. Defaults to None.
            objkeywords (list, optional): _description_. Defaults to None.
            objstarttime (str, optional): _description_. Defaults to None.
        """
        updated_values = {}
        if objectuid != None:
            updated_values["objectuid"] = objectuid
        if objecthash != None:
            updated_values["objecthash"] = objecthash
        if keywords != None:
            updated_values["obj_keywords"] = keywords
        if objstarttime != None:
            updated_values["objstarttime"] = objstarttime
        if length != None:
            updated_values["obj_length"] = length
        if mime_type != None:
            updated_values["mime_type"] = mime_type
        if file_name != None:
            updated_values["file_name"] = file_name
        if privacy != None:
            updated_values["private"] = privacy
        
        self.persistence_controller.update_enterprise_sync_object(logger, **updated_values)
        
    def get_enterprise_sync_data(self, logger, objecthash: str = None, objectuid: str = None, use_bytes: bool = False, convert_newlines: bool = False, *args, **kwargs):
        """get the object data from an enterprise sync object"""
        data_obj = self.persistence_controller.get_enterprise_sync_data_object(logger, objectuid, objecthash)
        if data_obj == None:
            self.response.set_value("objectdata", None)
            return None
        object_data = self.filesystem_controller.get_file(data_obj.file_type, data_obj.PrimaryKey, use_bytes=use_bytes) # type: ignore
        if convert_newlines:
            object_data = self.format_sync_controller.convert_newlines(object_data)
        self.response.set_value("objectdata", object_data)

    def get_multiple_enterprise_sync_data(self, logger, objectuids: List[str]=None, objecthashs: List[str]=None, use_bytes=False, convert_newlines: bool = False, *args, **kwargs):
        """
        Get the object data from multiple enterprise sync objects.

        Args:
            objectuids (List[str]): A list of object UIDs to retrieve the data for.

        Returns:
            None
        """
        object_data_list = []
        if objectuids != None:
            for uid in objectuids:
                try:
                    data_obj = self.persistence_controller.get_enterprise_sync_data_object(logger, uid, None, )
                    object_data = self.filesystem_controller.get_file(data_obj.file_type, data_obj.PrimaryKey, use_bytes) # type: ignore
                    if convert_newlines:
                        object_data = self.format_sync_controller.convert_newlines(object_data)
                    object_data_list.append(object_data)
                except Exception as ex:
                    logger.error("exception thrown getting enterprise sync object by uid %s", ex)
        if objecthashs != None:
            for objhash in objecthashs:
                try:
                    data_obj = self.persistence_controller.get_enterprise_sync_data_object(logger, None, objhash)
                    object_data = self.filesystem_controller.get_file(data_obj.file_type, data_obj.PrimaryKey, use_bytes) # type: ignore
                    if convert_newlines:
                        object_data = self.format_sync_controller.convert_newlines(object_data)
                    object_data_list.append(object_data)
                except Exception as ex:
                    logger.error("exception thrown getting enterprise sync object by hash %s", ex)
        self.response.set_value("objectdata", object_data_list)

    def get_multiple_enterprise_sync_metadata(self, logger, objectuids: List[str]=None, objecthashs: List[str]=None, tool: str=None, keyword:str = None, *args, **kwargs):
        """
        Get the object data from multiple enterprise sync objects.

        Args:
            objectuids (List[str]): A list of object UIDs to retrieve the data for.

        Returns:
            None
        """
        object_metadata_list = []
        
        if objectuids != None:
            for uid in objectuids:
                data_obj = self.persistence_controller.get_enterprise_sync_data_object(logger, uid, None, )
                if data_obj != None:
                    object_metadata_list.append(data_obj)
        
        if objecthashs != None:
            for objhash in objecthashs:
                data_obj = self.persistence_controller.get_enterprise_sync_data_object(logger, None, objhash)
                if data_obj != None:
                    object_metadata_list.append(data_obj)

        if objecthashs == None and objectuids == None:
            kwarg = {}
            if tool != None:
                kwarg["tool"] = tool
            if keyword != None:
                kwarg["keyword"] = keyword
            object_metadata_list: List[EnterpriseSyncDataObject] = self.persistence_controller.get_multiple_enterprise_sync_data_objec(logger, **kwarg)

        self.response.set_value("objectmetadata", object_metadata_list)
    
    def get_enterprise_sync_metadata(self, logger, objectuid: str=None, objecthash: str=None, objectid: int=None, file_name: str=None, *args, **kwargs):
        """
        Get the object data from multiple enterprise sync objects.

        Args:
            objectuids (List[str]): A list of object UIDs to retrieve the data for.

        Returns:
            None
        """
        object_metadata: EnterpriseSyncDataObject = None

        if file_name != None:
            object_metadata: EnterpriseSyncDataObject = self.persistence_controller.get_enterprise_sync_data_object(logger, file_name=file_name)

        if objectuid != None:
            object_metadata: EnterpriseSyncDataObject = self.persistence_controller.get_enterprise_sync_data_object(logger, object_uid=objectuid, object_hash=None)
        
        if objecthash != None and object_metadata == None:
            object_metadata: EnterpriseSyncDataObject = self.persistence_controller.get_enterprise_sync_data_object(logger, object_uid=None, object_hash=objecthash)
            
        if objectid != None and object_metadata == None:
            object_metadata: EnterpriseSyncDataObject = self.persistence_controller.get_enterprise_sync_data_object(logger, object_id=objectid)

        self.response.set_value("objectmetadata", object_metadata)

    def get_all_enterprise_sync_metadata(self, logger, *args, **kwargs):
        sync_data = self.persistence_controller.get_all_enterprise_sync_data_objects(logger)
        self.response.set_value("objectmetadata", sync_data) 

    def delete_enterprise_sync_data(self, logger, *args, **kwargs):
        """ delete an enterprise sync object and its associated data
        """
        data_obj = self.persistence_controller.get_enterprise_sync_data_object(logger, *args, **kwargs)
        self.filesystem_controller.delete_file(file_type=data_obj.file_type, object_uid=data_obj.PrimaryKey)
        self.persistence_controller.delete_enterprise_sync_object(*args, **kwargs)
       